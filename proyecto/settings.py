"""
Django settings for proyecto project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from os import getenv  # Importa la función getenv para obtener variables de entorno del sistema.
from dotenv import load_dotenv  # Importa la función load_dotenv para cargar variables de entorno desde un archivo .env.
from urllib.parse import urlparse  # Importa urlparse para analizar la URL de la base de datos.

# Cargar las variables de entorno
load_dotenv() 

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-slg5dhylcr1i+z)46%3q6no6!zs)b1)s#f7e&d0r35nr9iw7mb'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# ALLOWED_HOSTS = []
ALLOWED_HOSTS = ['*']


# CSRF_TRUSTED_ORIGINS = ['https://*']
CSRF_TRUSTED_ORIGINS = [os.getenv("DOMINIO")]


# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'app',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'proyecto.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'proyecto.wsgi.application'

# Este método carga las variables definidas en un archivo .env (ubicado en la raíz del proyecto) en las variables de entorno del sistema.
# Es útil para manejar credenciales sensibles como contraseñas y URLs de conexión sin incluirlas directamente en el código fuente.

# Obtener la URL desde las variables de entorno
database_url = getenv("DATABASE_URL")  
# Utiliza la función getenv para leer el valor de la variable de entorno DATABASE_URL.
# DATABASE_URL debe ser una URL válida que defina los detalles de la conexión a la base de datos PostgreSQL.

if not database_url:  
    # Si la variable DATABASE_URL no está configurada, lanza una excepción para informar al desarrollador.
    raise ValueError("DATABASE_URL no está configurada en el archivo .env")

# Analizar la URL de la base de datos para obtener sus componentes
tmpPostgres = urlparse(database_url)  
# Descompone la URL en sus partes (protocolo, usuario, contraseña, host, puerto y path).
# Ejemplo:
# Si `database_url` = "postgresql://user:password@host:port/database?sslmode=require",
# `tmpPostgres` contendrá:
# - scheme: "postgresql"
# - username: "user"
# - password: "password"
# - hostname: "host"
# - port: "port"
# - path: "/database"

# # Database
# # https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',  
        # Define el motor de base de datos que usará Django, en este caso PostgreSQL.

        'NAME': tmpPostgres.path.lstrip('/').decode('utf-8') if isinstance(tmpPostgres.path, bytes) else tmpPostgres.path.lstrip('/'),
        # Obtiene el nombre de la base de datos eliminando la barra inicial (/) de `tmpPostgres.path`.
        # Si `tmpPostgres.path` es de tipo bytes, lo convierte a una cadena de texto usando `.decode('utf-8')`.

        'USER': tmpPostgres.username,  
        # El usuario de la base de datos, extraído de la URL.

        'PASSWORD': tmpPostgres.password,  
        # La contraseña asociada al usuario, extraída de la URL.

        'HOST': tmpPostgres.hostname,  
        # El nombre del host donde está alojada la base de datos, extraído de la URL.

        'PORT': tmpPostgres.port or 5432,  
        # El puerto en el que la base de datos escucha conexiones.
        # Si no se especifica un puerto en la URL, usa el puerto predeterminado para PostgreSQL (5432).
        
        'OPTIONS': {
            'sslmode': 'require',
        },
        # Sirve para habilitar y forzar el uso de una conexión segura (SSL/TLS) entre tu aplicación Django y 
        # tu base de datos PostgreSQL. Esto asegura que todos los datos que viajan entre tu servidor y 
        # la base de datos estén encriptados, protegiéndolos contra posibles intercepciones o ataques.

    }
}


# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# # -----------------------------------------
# Archivos estáticos (CSS, JS) no visibles en /admin
# Este problema ocurre porque los archivos estáticos no se están sirviendo correctamente en el entorno de producción. Django no sirve archivos estáticos automáticamente en producción; necesitas configurarlos correctamente.

# Solución:
# Sigue estos pasos para configurar correctamente los archivos estáticos en Azure:

# Ejecuta collectstatic: Ejecuta este comando para recopilar todos los archivos estáticos en la carpeta STATIC_ROOT definida en tu archivo settings.py:

# bash
# Copiar código
# python manage.py collectstatic
# # -----------------------------------------
# TO-DO add the static files
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media/'

LOGIN_REDIRECT_URL = '/welcome/'  # Redirige después del login (si usas decoradores o middleware)
# LOGIN_URL = '/login/'            # Redirige aquí si el usuario no está autenticado
LOGOUT_REDIRECT_URL = '/login/'  # Redirige aquí después del logout

